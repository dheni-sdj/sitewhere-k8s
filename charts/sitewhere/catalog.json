{
	"deployments": [
		{
			"id": "default",
			"name": "Default",
			"requiredPackages": [
				"zookeeper-kafka-ha",
				"syncope",
				"mongodb-ha"
			],
			"optionalPackages": [
				"cassandra",
				"influxdb"
			],
			"microservices": [
				"asset_management",
				"batch_operations",
				"command_delivery",
				"device_management",
				"device_registration",
				"device_state",
				"event_management",
				"event_search",
				"event_sources",
				"inbound_processing",
				"instance_management",
				"label_generation",
				"outbound_connectors",
				"schedule_management",
				"web_rest"
			]
		}
	],
	"packages": [
		{
			"id": "cassandra",
			"name": "Cassandra",
			"icon": "database",
			"enablement": "sitewhere-infra-database.cassandra.enabled",
			"enabled": false,
			"attributes": [
				{
					"id": "diskSize",
					"description": "Disk space reserved",
					"type": "disk",
					"value": "10Gi",
					"configuration": "sitewhere-infra-database.cassandra.persistence.size"
				}
			]
		},
		{
			"id": "influxdb",
			"name": "InfluxDB",
			"icon": "database",
			"enablement": "sitewhere-infra-database.influxdb.enabled",
			"enabled": false,
			"attributes": [
				{
					"id": "diskSize",
					"description": "Disk space reserved",
					"type": "disk",
					"value": "10Gi",
					"configuration": "sitewhere-infra-database.influxdb.persistence.size"
				}
			]
		},
		{
			"id": "kafka-ha",
			"name": "Kafka HA Configuration",
			"icon": "stream",
			"enablement": "sitewhere-infra-core.cp-kafka.enabled",
			"enabled": true,
			"attributes": [
				{
					"id": "brokers",
					"description": "Number of brokers",
					"type": "replicas",
					"constraints": {
						"min": 0,
						"max": 10
					},
					"value": "3",
					"configuration": "sitewhere-infra-core.cp-kafka.brokers"
				},
				{
					"id": "diskSize",
					"description": "Disk space reserved",
					"type": "disk",
					"value": "8Gi",
					"configuration": "sitewhere-infra-core.cp-kafka.persistence.size"
				}
			]
		},
		{
			"id": "mongodb-ha",
			"name": "MongoDB HA Configuration",
			"icon": "database",
			"attributes": [
				{
					"id": "diskSize",
					"description": "Disk space reserved",
					"type": "disk",
					"value": "10Gi",
					"configuration": "sitewhere-infra-database.mongodb.persistence.storage"
				},
				{
					"id": "secondaryReplicas",
					"description": "Number of secondary instances",
					"type": "replicas",
					"constraints": {
						"min": 0,
						"max": 5
					},
					"value": "1",
					"configuration": "sitewhere-infra-database.mongodb.replicaSet.replicas.secondary"
				},
				{
					"id": "arbiterReplicas",
					"description": "Number of arbiter instances",
					"type": "replicas",
					"constraints": {
						"min": 0,
						"max": 5
					},
					"value": "1",
					"configuration": "sitewhere-infra-database.mongodb.replicaSet.replicas.arbiter"
				}
			]
		},
		{
			"id": "prometheus",
			"name": "Prometheus Metrics",
			"icon": "chart-bar",
			"enablement": "sitewhere-infra-core.prometheus.enabled",
			"enabled": true,
			"attributes": [
			]
		},
		{
			"id": "syncope",
			"name": "Apache Syncope",
			"icon": "users",
			"attributes": [
				{
					"id": "coreReplicas",
					"description": "Number of replicas (Core)",
					"type": "replicas",
					"constraints": {
						"min": 0,
						"max": 5
					},
					"value": "1",
					"configuration": "sitewhere-infra-core.syncope.syncopeConfig.replicas"
				},
				{
					"id": "consoleReplicas",
					"description": "Number of replicas (Console)",
					"type": "replicas",
					"constraints": {
						"min": 0,
						"max": 5
					},
					"value": "1",
					"configuration": "sitewhere-infra-core.syncope.syncopeConsoleConfig.replicas"
				},
				{
					"id": "enduserReplicas",
					"description": "Number of replicas (EndUser)",
					"type": "replicas",
					"constraints": {
						"min": 0,
						"max": 5
					},
					"value": "1",
					"configuration": "sitewhere-infra-core.syncope.syncopeEndUserConfig.replicas"
				}
			],
			"requires": [
				"syncope-postgres"
			]
		},
		{
			"id": "syncope-postgres",
			"name": "Syncope Postgres Instance",
			"icon": "database",
			"enablement": "sitewhere-infra-core.postgresql.enabled",
			"enabled": true,
			"attributes": [
				{
					"id": "diskSize",
					"description": "Disk space reserved",
					"type": "disk",
					"value": "4Gi",
					"configuration": "sitewhere-infra-core.postgresql.persistence.size"
				}
			]
		},
		{
			"id": "zookeeper-ha",
			"name": "Zookeeper HA Configuration",
			"icon": "cogs",
			"enablement": "sitewhere-infra-core.cp-zookeeper.enabled",
			"enabled": true,
			"attributes": [
				{
					"id": "replicaCount",
					"description": "Number of replicas",
					"type": "replicas",
					"constraints": {
						"min": 0,
						"max": 5
					},
					"value": "3",
					"configuration": "sitewhere-infra-core.cp-zookeeper.servers"
				},
				{
					"id": "dataDiskSize",
					"description": "Disk space reserved for data",
					"type": "disk",
					"value": "4Gi",
					"configuration": "sitewhere-infra-core.cp-zookeeper.persistence.dataDirSize"
				},
				{
					"id": "logDiskSize",
					"description": "Disk space reserved for logs",
					"type": "disk",
					"value": "4Gi",
					"configuration": "sitewhere-infra-core.cp-zookeeper.persistence.dataLogDirSize"
				}
			]
		},
		{
			"id": "zookeeper-kafka-ha",
			"name": "Zookeeper/Kafka HA Configuration",
			"icon": "cogs",
			"requires": [
				"zookeeper-ha",
				"kafka-ha"
			]
		}
	],
	"microservices": {
		"logging": [
			{
				"id": "sitewhere",
				"description": "SiteWhere Logging",
				"levels": [
					{
						"id": "global",
						"description": "Global SiteWhere log level",
						"type": "loglevel",
						"value": "INFO",
						"configuration": "services.logging.sitewhere.level"
					},
					{
						"id": "grpc",
						"description": "SiteWhere gRPC interactions",
						"type": "loglevel",
						"value": "INFO",
						"configuration": "services.logging.sitewhere.grpc.level"
					},
					{
						"id": "kafka",
						"description": "SiteWhere Kafka interactions",
						"type": "loglevel",
						"value": "INFO",
						"configuration": "services.logging.sitewhere.kafka.level"
					}
				]
			},
			{
				"id": "grpc",
				"description": "gRPC Logging",
				"levels": [
					{
						"id": "global",
						"description": "Internal gRPC messaging",
						"type": "loglevel",
						"value": "ERROR",
						"configuration": "services.logging.grpc.level"
					}
				]
			}
		],
		"services": [
			{
				"id": "asset_management",
				"name": "Asset Management",
				"description": "Delivers asset management persistence APIs",
				"icon": "collections",
				"replicas": 1
			},
			{
				"id": "batch_operations",
				"name": "Batch Operations",
				"description": "Manages batch processing APIs",
				"icon": "view_module",
				"replicas": 1
			},
			{
				"id": "command_delivery",
				"name": "Command Delivery",
				"description": "Handles device command delivery operations",
				"icon": "call_made",
				"replicas": 1
			},
			{
				"id": "device_management",
				"name": "Device Management",
				"description": "Delivers device management persistence APIs",
				"icon": "developer_board",
				"replicas": 1
			},
			{
				"id": "device_registration",
				"name": "Device Registration",
				"description": "Handles registration of new devices",
				"icon": "developer_board",
				"replicas": 1
			},
			{
				"id": "device_state",
				"name": "Device State",
				"description": "Manages recent device state (device twin)",
				"icon": "developer_board",
				"replicas": 1
			},
			{
				"id": "event_management",
				"name": "Event Management",
				"description": "Delivers device event management persistence APIs",
				"icon": "ballot",
				"replicas": 1
			},
			{
				"id": "event_search",
				"name": "Event Search",
				"description": "Supports searching device events via external sources",
				"icon": "search",
				"replicas": 1
			},
			{
				"id": "event_sources",
				"name": "Event Sources",
				"description": "Provides connectivity to external sources for events",
				"icon": "inbox",
				"replicas": 1
			},
			{
				"id": "inbound_processing",
				"name": "Inbound Processing",
				"description": "Handles inbound processing such as event enrichment",
				"icon": "settings",
				"replicas": 1
			},
			{
				"id": "instance_management",
				"name": "Instance Management",
				"description": "Handles instance-wide tasks such as bootstrapping",
				"icon": "business",
				"replicas": 1
			},
			{
				"id": "label_generation",
				"name": "Label Generation",
				"description": "Creates labels/QR codes and other artifacts",
				"icon": "menu_book",
				"replicas": 1
			},
			{
				"id": "outbound_connectors",
				"name": "Outbound Connectors",
				"description": "Integrates event data with external systems",
				"icon": "forward",
				"replicas": 1
			},
			{
				"id": "rule_processing",
				"name": "Rule Processing",
				"description": "Performs rule processing operations",
				"icon": "settings",
				"replicas": 1
			},
			{
				"id": "schedule_management",
				"name": "Schedule Management",
				"description": "Delivers schedule management persistence APIs",
				"icon": "date_range",
				"replicas": 1
			},
			{
				"id": "streaming_media",
				"name": "Streaming Media",
				"description": "Stores streamng media such as audio and video",
				"icon": "videocam",
				"replicas": 1
			},
			{
				"id": "web_rest",
				"name": "Web/REST Gateway",
				"description": "API gateway for accessing services via REST",
				"icon": "code",
				"replicas": 1
			}
		]
	}
}
